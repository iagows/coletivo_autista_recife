// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

///// CONFIGURATION /////
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

////////// TYPE GENERATOR //////////
generator prismabox {
  provider                    = "prismabox"
  // you can optionally specify the output location. Defaults to ./prismabox
  output                      = "./dto"
  // if you want, you can customize the imported variable name that is used for the schemes. Defaults to "Type" which is what the standard typebox package offers
  typeboxImportVariableName   = "t"
  // you also can specify the dependency from which the above import should happen. This is useful if a package re-exports the typebox package and you would like to use that
  typeboxImportDependencyName = "elysia"
  // by default the generated schemes do not allow additional properties. You can allow them by setting this to true
  additionalProperties        = true
  // optionally enable the data model generation. See the data model section below for more info
  inputModel                  = true
}

////////// TIPOS COMUNS //////////

/// Contato (ddd, telefone e se est√° associado a telegram/whatsapp)
type Contato {
  ddd        Int
  numero     Int
  isTelegram Boolean @default(false)
  isWhatsapp Boolean @default(false)
}

type Especialidade {
  nome String
}

type Endereco {
  cidade      String
  bairro      String
  logradouro  String
  numero      Int?
  complemento String?
}

type Link {
  url String
}

////////// MODELOS //////////

model Admin {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  nome      String    @unique
  email     String    @unique
  last_seen DateTime?
  contatos  Contato[]
}

model Regra {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  texto     String  @unique
  descricao String?
}

model Profissional {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  nome           String          @unique
  isParticular   Boolean?        @default(false)
  isPublico      Boolean?        @default(false)
  comentario     String?
  preco          Float?
  especialidades Especialidade[]
  enderecos      Endereco[]
  links          Link[]
  contatos       Contato[]
}

model ConsultorioEscola {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  nome           String          @unique
  preco          Float?
  enderecos      Endereco[]
  contatos       Contato[]
  comentario     String?
  especialidades Especialidade[]
}

model Texto {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  texto String @unique
}
