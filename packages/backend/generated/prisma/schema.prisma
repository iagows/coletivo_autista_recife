// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Contato {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  ddd                 Int
  numero              Int
  isTelegram          Boolean
  isWhatsapp          Boolean
  Admin               Admin?             @relation(fields: [adminId], references: [id])
  adminId             String?            @db.ObjectId
  Profissional        Profissional?      @relation(fields: [profissionalId], references: [id])
  profissionalId      String?            @db.ObjectId
  ConsultorioEscola   ConsultorioEscola? @relation(fields: [consultorioEscolaId], references: [id])
  consultorioEscolaId String?            @db.ObjectId
}

model Admin {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  nome      String    @unique
  email     String
  last_seen DateTime
  contatos  Contato[]
}

model Texto {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  texto String @unique
}

model Regra {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  texto     String  @unique
  descricao String?
}

model Profissional {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  nome           String          @unique
  isParticular   Boolean?
  isPublico      Boolean?
  comentario     String?
  preco          Float?
  especialidades Especialidade[]
  enderecos      Endereco[]
  links          Link[]
  contatos       Contato[]
}

model Especialidade {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  nome                String             @unique
  Profissional        Profissional?      @relation(fields: [profissionalId], references: [id])
  profissionalId      String?            @db.ObjectId
  ConsultorioEscola   ConsultorioEscola? @relation(fields: [consultorioEscolaId], references: [id])
  consultorioEscolaId String?            @db.ObjectId
}

model Endereco {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  cidade              String
  bairro              String
  logradouro          String
  numero              Int?
  complemento         String?
  Profissional        Profissional?      @relation(fields: [profissionalId], references: [id])
  profissionalId      String?            @db.ObjectId
  ConsultorioEscola   ConsultorioEscola? @relation(fields: [consultorioEscolaId], references: [id])
  consultorioEscolaId String?            @db.ObjectId
}

model Link {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  url            String        @unique
  Profissional   Profissional? @relation(fields: [profissionalId], references: [id])
  profissionalId String?       @db.ObjectId
}

model ConsultorioEscola {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  nome           String          @unique
  preco          Float?
  enderecos      Endereco[]
  contatos       Contato[]
  comentario     String?
  especialidades Especialidade[]
}
